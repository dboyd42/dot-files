##############################---EXPORTS---####################################
export VISUAL=nvim  #TODO: mv to .zshrc

############################---ZSH_Aliases---##################################

###
# Directory Shortcts ---------------------------------------------------------
###  *NOTE: These aliases have primarily been replaced with `autojump`
alias csbox='cd /mnt/c/Users/$WIN_USERNAME/OneDrive/Documents/sandbox/'
alias gith='cd $HOME/Documents/code/repos/dboyd42'
alias sbox='cd ~/Documents/code/sandbox/'

###
# File Processing -------------------------------------------------------------
###
alias r2p='pandoc -V geometry:a4paper -f rst --toc -o $PDF $RST'
alias r2pall='for file in ./*; do if [ ${file: -4} = '.rst' ]; then RST=$file; PDF=${file%.*}.pdf; r2p; fi; done'
alias tl='tmux ls'
alias v='nvim'
alias vR='nvim README.md'
alias vim='nvim'
# Read Markdown files in Kitty term
rmd() { pandoc -f gfm $1 | lynx -stdin }

###
# Git aliases -----------------------------------------------------------------
###
alias g='git'
alias gac='if git add .; then \
               read CMSG\?"Enter commit message: "; \
               git ci -m $CMSG; \
fi'
alias gacp='if git add .; then \
                read CMSG\?"Enter commit message: "; \
                git ci -m $CMSG; \
                git push
fi'
alias ginit='git add .; git ci -m "init commit"; git push'
alias gla='for dir in ./*; do \
             [[ -d $dir ]]  && [[ -d $dir/.git ]] \
               && echo $dir && cd $dir && git pull && cd ../; \
done'
alias gl='git pull'
alias gs='git status'
alias gsa='for DIR in ./*; do \
            [[ -d $DIR ]] && [[ -d $DIR/.git ]] \
            && echo $DIR && cd $DIR && git status \
                && echo "---\n" && cd ../; \
done'

###
# KDE++ -----------------------------------------------------------------------
###
alias kprint='konsoleprofile colors=BlackOnWhiteFixed'
alias ksolid="konsoleprofile colors=Utterly-Sweet-Solid-Konsole"
alias ktrans="konsoleprofile colors=Utterly-Sweet-Konsole"
alias kdsktop-restart='kquitapp 5 plasmashell || \
                       killall plasmashell && kstart5 plasmashell'

###
# Linux-ie Stuff --------------------------------------------------------------
###
alias bat='bat --color=always --theme=Dracula'
alias bat2='bat --color=never --wrap=never --theme=Dracula'
alias ll='lsd -alh'
alias ls='lsd'

###
# Networking ------------------------------------------------------------------
###
alias p2='ping -c2'

###
# Prgmming Langs --------------------------------------------------------------
###
alias com='g++ -std=c++1z -o main *.cpp'
alias py='python3'

###
# Remote Computing ------------------------------------------------------------
###
alias bandit0='sshpass -p bandit0 ssh bandit0@bandit.labs.overthewire.org -p 2220'

###
# Reverse Engineering ---------------------------------------------------------
###
alias revEngBin-crkPasswd1="objdump -d $FILE | grep cmp | cut -d'x' -f2 | cut -d',' -f1 | xxd -r -p"
alias revEngBin-crkPasswd2="objdump -d $FILE | cut -d'x' -f2 | cut -d',' -f1 | xxd -r -p"

###
# Sudo pre-pending ------------------------------------------------------------
###
alias apt='sudo apt'
alias fdisk='sudo fdisk'
alias pwrstat='sudo pwrstat'  # CyberPower UPS / PowerPanel
alias reboot='sudo reboot'
alias systemctl='sudo systemctl'

###
# System Processes ------------------------------------------------------------
###
alias killme='read NAME\?"Prgm Name: "; \
              ps aux | grep $NAME | cut -d" " -f5 | xargs kill -9'

###
# Terminal Jazz ---------------------------------------------------------------
###
alias ps1="export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '"
alias ps2="export PS1='\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '"
alias ps3="export PS1='\[\033[01;31m\]\u:\[\033[01;34m\]\W\[\033[00m\]\$ '"
# Print xterm-256-color chart in terminal
function clicolors() {
    i=1
    for color in {000..255}; do;
        c=$c"$FG[$color]$colorâœ”$reset_color  ";
        if [ `expr $i % 8` -eq 0 ]; then
            c=$c"\n"
        fi
        i=`expr $i + 1`
    done;
    echo $c | sed 's/%//g' | sed 's/{//g' | sed 's/}//g' | sed '$s/..$//';
    c=''
}

###
# VMs & Containers ------------------------------------------------------------
###
alias docker-daddy='docker run -it kalilinux/kali-rolling'
# Convert x86_64 arch to run on M1's UTM Hypervisor
alias vmdk2qcow2='(){qemu-img convert -p -O qcow2 "$1" "${1%%vmdk}qcow2"}'

#---------------------------------[END]----------------------------------------

#############################---OS-SPECIFIC---#################################
OS_RELEASE=`uname -r`
OS_NAME=`uname -s`
NODENAME=`uname -n`

###
### Kali ----------------------------------------------------------------------
###
if [[ $OS_RELEASE =~ 'kali' ]]; then
        alias bat='batcat --color=always --theme=Dracula'
        alias bat2='batcat --color=never --wrap=never --theme=Dracula'
fi

###
# macOS (Aarch64/arm64/M1) ----------------------------------------------------
###
if [[ $OS_NAME =~ 'Darwin' ]]; then
    alias firefox='open -a /Applications/Firefox.app'
    alias onedrive='cd $HOME/Documents/OneDrive/'
    # alias pip='/opt/homebrew/bin/pip3'
    # alias py='/opt/homebrew/bin/python3'
    # alias python='/opt/homebrew/bin/python3'
    alias txt2pdf='function _txt2pdf() { \
                    enscript --no-header -p output.ps "$1" && \
                    ps2pdf output.ps "${1%.*}.pdf" && \
                    rm output.ps && \
                    open "${1%.*}.pdf" && \
                    echo && \
                    echo "Are the words are cut off at EOL and newline?" && \
                    echo -e "\tThen: #1) Set \`tw=79\` on txt file and" && \
                    echo -e "\t      #2) re-run txt2pdf";
                  };
                  _txt2pdf'
fi

###
# WSL2 ------------------------------------------------------------------------
###
if [[ $OS_RELEASE =~ microsoft ]]; then
    WIN_USERNAME=`cmd.exe /c "echo %USERNAME%" 2>/dev/null | cut -d$'\r' -f1`
else
    # Grab using PS
    #WIN_USERNAME=`powershell.exe '$env:UserName'`
    WIN_USERNAME="--WIN_USERNAME--"    # old
fi
# Powerline configuration
if [ -f /usr/share/powerline/bindings/bash/powerline.sh ]; then
	powerline-daemon -q
	POWERLINE_BASH_CONTINUATION=1
	POWERLINE_BASH_SELECT=1
	source /usr/share/powerline/bindings/bash/powerline.sh
fi

#############################---MACHINE-SPECIFIC---############################

###
### Linux (Aarch64/arm64/M1) --------------------------------------------------
###
if [[ $OS_RELEASE == *'arm64'* ]]; then
# Nvim: Resolved install via Snap		#TODO: test
    #alias v='vim'
    #alias vR='vim README.md'
    #alias vim='vim'
    #export VISUAL=vim
    echo "test ~/.zsh_aliases for nvim + Lazy"
fi
#---------------------------------[END]----------------------------------------

